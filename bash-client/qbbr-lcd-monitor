#!/usr/bin/env bash

# use ./qbbr-lcd-monitor "1st line" "2nd line"
# LCD 1602 (16x2)

port=/dev/ttyACM0

echo "port: $port"

stty -F $port -hupcl

# RPC simulation, call arduino fn
callFn() {
	echo ".fn:$1;" > $port
}

if [[ "$1" == "--clear" ]]; then
	callFn 'clear'
	exit 0
elif [[ "$1" == "--blink" ]]; then
	callFn 'blink'
	exit 0
elif [[ "$1" == "--blink-long" ]]; then
	callFn 'blink-long'
	exit 0
elif [[ "$1" == "--tone" ]]; then
	callFn 'tone'
	exit 0
elif [[ "$1" == "--screen-next" ]]; then
	callFn 'screen-next'
	exit 0
elif [[ "$1" == "--i2c-scan" ]]; then
	callFn 'i2c-scan'
	exit 0
elif [[ "$1" == "--relay-toggle" ]]; then
	callFn 'relay-toggle'
	exit 0
elif [[ "$1" == "--relay-on" ]]; then
	callFn 'relay-on'
	exit 0
elif [[ "$1" == "--relay-off" ]]; then
	callFn 'relay-off'
	exit 0
fi

if [[ -n $1 ]]; then
	line1=$(printf '%-16s' "${1:0:16}")
	echo -n 'set line 1: "'
	echo -n "${line1}"
	echo '"'
	echo ".l1:${line1};" > $port
fi

if [[ -n $2 ]]; then
	line2=$(printf '%-16s' "${2:0:16}")
	echo -n 'set line 2: "'
	echo -n "${line2}"
	echo '"'
	echo ".l2:${line2};" > $port
fi
